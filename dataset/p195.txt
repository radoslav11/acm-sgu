1. Abridged Problem Statement

You are given a rooted tree of N programmers (nodes) numbered 1…N, where node 1 is the root (Bill Hates) and each other node’s parent is given. You want to assign as many \$1000 bonuses as possible under these rules:

- A bonus flows along a parent→child edge.
- Each programmer can either receive a bonus from their parent, or assign a bonus to exactly one child, or do neither—but not both.
- No one can assign more than one bonus downward.

Compute the maximum total bonus amount (1000 × maximum number of receivers) and list the identifiers of all programmers who end up receiving a bonus, in ascending order.

2. Detailed Editorial

We have a tree with root 1, and we want a maximum matching of edges oriented from parent to child, with the constraint that matched edges cannot share endpoints. Each matched edge contributes one receiving child (worth \$1000).  

Dynamic programming on trees handles this cleanly:

Define for each node u:
- dp0[u] = maximum number of receivers in u’s subtree if u is *not* matched from above (i.e., u is free to match to one of its children or remain unmatched).
- dp1[u] = maximum number of receivers in u’s subtree if u *is* matched from above (i.e., u receives from its parent, so it cannot match any of its children).

Transitions (processing children first, in post-order):

1. If u receives from its parent (state dp1[u]):
   - That contributes 1 receiver (u itself),
   - All children must be in dp0 state (they cannot receive from u, since u is already a receiver).
   So  
     dp1[u] = 1 + ∑_{v child of u} dp0[v].

2. If u is free (state dp0[u]):
   - Either u does *not* match any child: total = ∑ dp0[v].
   - Or u matches exactly one child v: that child takes state dp1[v], the others stay dp0:
     total = (∑ dp0[other children]) + dp1[v].
   So  
     dp0[u] = max( ∑ dp0[v],  max over v of [ ∑ dp0[v] − dp0[v] + dp1[v] ] ).

After filling dp0, dp1 for all u (by iterating u from N down to 1), the answer for the whole tree is dp0[1] × 1000 (since root cannot receive from above).  

Reconstruction (finding which nodes receive):
- We maintain a boolean array take[u], meaning “u is forced to receive from its parent.” Initialize all false.
- Traverse nodes in increasing order:
  * If take[u] is true but dp1[u] == dp0[u], that means it was unnecessary to force u to receive, so clear take[u].
  * If take[u] is true, we record u as a receiver and mark all its children as take[v] = false (they cannot receive).
  * Otherwise (u is free), we find whether one child v was chosen in the optimal transition for dp0[u]:
    - Compute S0 = ∑ dp0[child].
    - Look for a child v such that dp0[u] == S0 − dp0[v] + dp1[v]. If found, set take[v] = true; all other children are set take[other] = false.
- Finally, every u with take[u] true becomes a receiver. Collect them in ascending order.

Time complexity is O(N). Memory is O(N).

3. Provided C++ Solution with Detailed Comments

```cpp
#include <bits/stdc++.h>
using namespace std;

// Overload output for pair<T1,T2>
template<typename T1, typename T2>
ostream& operator<<(ostream& out, const pair<T1, T2>& x) {
    return out << x.first << ' ' << x.second;
}

// Overload input for pair<T1,T2>
template<typename T1, typename T2>
istream& operator>>(istream& in, pair<T1, T2>& x) {
    return in >> x.first >> x.second;
}

// Overload input for vector<T>
template<typename T>
istream& operator>>(istream& in, vector<T>& a) {
    for(auto& x: a) {
        in >> x;
    }
    return in;
}

// Overload output for vector<T>
template<typename T>
ostream& operator<<(ostream& out, const vector<T>& a) {
    for(auto x: a) {
        out << x << ' ';
    }
    return out;
}

int n;                              // Number of nodes
vector<vector<int>> adj;            // Adjacency list: children of each node

// Read input and build the tree
void read() {
    cin >> n;
    adj.assign(n, {});             // initialize n empty child lists
    // Nodes are 1..n, but we use 0..n-1 internally
    for(int i = 1; i < n; i++) {
        int p; 
        cin >> p;                   // p = parent of node (i+1)
        adj[p - 1].push_back(i);   // zero-based: parent = p-1, child = i
    }
}

void solve() {
    // dp[u][0] = best when u is free from above
    // dp[u][1] = best when u is matched from above (i.e., receives)
    vector<vector<int>> dp(n, vector<int>(2, 0));

    // Post-order DP: children have larger indices, so go from n-1 down to 0
    for(int u = n - 1; u >= 0; u--) {
        // Case: u receives from its parent
        dp[u][1] = 1;              // count u itself
        for(int v: adj[u]) {
            dp[u][1] += dp[v][0];  // children must be in state 0 (free)
        }

        // Sum of all dp[v][0]
        int sum_dp_0 = 0;
        for(int v: adj[u]) {
            sum_dp_0 += dp[v][0];
        }

        // Initialize dp[u][0] = no match at u
        dp[u][0] = sum_dp_0;

        // Try matching u with exactly one child v
        for(int v: adj[u]) {
            // if we match u→v, child v uses dp[v][1], others dp0
            int candidate = sum_dp_0 - dp[v][0] + dp[v][1];
            dp[u][0] = max(dp[u][0], candidate);
        }

        // It might be better to treat u as receiving if that equals dp0
        dp[u][1] = max(dp[u][1], dp[u][0]);
    }

    // Reconstruction of which nodes receive
    vector<int> ans;                 // list of receivers
    vector<bool> take(n, false);     // take[u]=true means u will receive
    for(int u = 0; u < n; u++) {
        // If we forced take[u] earlier but actually dp0[u]==dp1[u],
        // we don't need u to receive.
        if(take[u] && dp[u][1] == dp[u][0]) {
            take[u] = false;
        }

        if(take[u]) {
            // u receives: record it and block its children
            ans.push_back(u + 1);      // back to 1-based
            for(int v: adj[u]) {
                take[v] = false;
            }
        } else {
            // u is free: see if u matched one child
            int sum_dp_0 = 0;
            for(int v: adj[u]) sum_dp_0 += dp[v][0];

            int pick_child = -1;
            for(int v: adj[u]) {
                // Check if matching u→v achieves dp0[u]
                if(dp[u][0] == sum_dp_0 - dp[v][0] + dp[v][1]) {
                    pick_child = v;
                    take[v] = true;     // force v to receive
                    break;
                }
            }
            // All other children are not receiving
            for(int v: adj[u]) {
                if(v != pick_child) take[v] = false;
            }
        }
    }

    // Output total money and the list of receivers
    cout << dp[0][0] * 1000 << '\n';
    cout << ans << '\n';
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    read();
    solve();
    return 0;
}
```

4. Python Solution with Detailed Comments

```python
import sys
sys.setrecursionlimit(10**7)
input = sys.stdin.readline

def main():
    n = int(input())
    # Build adjacency list; 0-based indexing
    children = [[] for _ in range(n)]
    parents = list(map(int, input().split()))
    for i, p in enumerate(parents, start=1):
        children[p-1].append(i)

    # dp0[u], dp1[u] as in the editorial
    dp0 = [0]*n
    dp1 = [0]*n

    # Post-order: since children always have larger index, loop u = n-1..0
    for u in range(n-1, -1, -1):
        # Case: u receives from its parent
        dp1[u] = 1 + sum(dp0[v] for v in children[u])

        # Sum of dp0 over all children
        sum0 = sum(dp0[v] for v in children[u])
        # If u matches no child
        best = sum0
        # If u matches exactly one child v
        for v in children[u]:
            cand = sum0 - dp0[v] + dp1[v]
            if cand > best:
                best = cand
        dp0[u] = best
        # Possibly treat u as a receiver if that’s equally good
        if dp1[u] < dp0[u]:
            dp1[u] = dp0[u]

    # Reconstruction of receivers
    take = [False]*n
    receivers = []
    for u in range(n):
        # If we previously marked take[u] but it wasn't needed, clear it
        if take[u] and dp1[u] == dp0[u]:
            take[u] = False

        if take[u]:
            # u receives
            receivers.append(u+1)   # store 1-based
            # its children cannot receive
            for v in children[u]:
                take[v] = False
        else:
            # u is free: find if u matched one child
            sum0 = sum(dp0[v] for v in children[u])
            picked = None
            for v in children[u]:
                if dp0[u] == sum0 - dp0[v] + dp1[v]:
                    picked = v
                    take[v] = True
                    break
            # all other children do not receive
            for v in children[u]:
                if v != picked:
                    take[v] = False

    # Output total money and sorted receivers
    total_money = dp0[0] * 1000
    print(total_money)
    print(*receivers)

if __name__ == "__main__":
    main()
```

5. Compressed Editorial

- Represent the hierarchy as a rooted tree (root = node 1).
- Define dp0[u] = max receivers in u’s subtree if u is *free*.
- Define dp1[u] = max receivers if u is *matched* from its parent.
- Transitions:
  - dp1[u] = 1 + Σ dp0[child].
  - dp0[u] = max( Σ dp0[child],  max over child v of [ Σ dp0[child] − dp0[v] + dp1[v] ] ).
- Process nodes in decreasing index (post-order), then answer = dp0[1] × 1000.
- Reconstruct the matching by walking from root downward, tracking which nodes are forced to receive (take[u]) and which child was matched at each free node.
<|instruction|>
Solve the below problem. The solution should start with an abridged problem statement. Then key observations. Then full solution based on the observations. Then C++ and Python implementations with comments.

231. Prime Sum
time limit per test: 0.25 sec.
memory limit per test: 4096 KB
input: standard
output: standard



Find all pairs of prime numbers (A, B) such that A<=B and their sum is also a prime number and does not exceed N.

Input
The input of the problem consists of the only integer N (1<=N<=10^6).

Output
On the first line of the output file write the number of pairs meeting the requirements. Then output all pairs one per line (two primes separated by a space).

Sample test(s)

Input
4

Output
0
Author:	Antony Popovich
Resource:	Leningrad Regional School Programming Olympiad
Date:	January 9, 2004

<|response|>
1. Abridged Problem Statement  
Given an integer N (1 ≤ N ≤ 10^6), find all pairs of primes (A, B) with A ≤ B such that A + B is also prime and does not exceed N. First print the number of such pairs, then list each pair on its own line.

2. Key Observations  
- The only even prime is 2; every other prime is odd.  
- The sum of two odd primes is even and >2, hence not prime.  
- Therefore, to get A + B prime, one of A or B must be 2.  
- That reduces the problem to finding primes p such that p is prime, p + 2 is prime, and p + 2 ≤ N.  
  (Each such p gives the pair (2, p).)

3. Full Solution Approach  
a) Sieve of Eratosthenes up to N:  
   - Create an array isComposite[0…N], initialized to false.  
   - Mark isComposite[0] = isComposite[1] = true.  
   - For each x from 2 to √N, if isComposite[x] is false, mark all multiples of x greater than x as composite.  
b) Collect pairs:  
   - For p from 2 to N–2:  
       if isComposite[p] == false and isComposite[p+2] == false, record the pair (2, p).  
c) Output the total number of recorded pairs, then each pair on its own line.

Time complexity:  
- Sieve: O(N log log N).  
- Scan for p: O(N).  
Space complexity: O(N).

4. C++ Implementation with Detailed Comments  
```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int N;
    cin >> N;

    // Edge case: N < 4 cannot yield any valid pair,
    // because the smallest sum 2+2=4 must be prime.
    if (N < 4) {
        cout << 0 << "\n";
        return 0;
    }

    // Sieve array: isComposite[i] = true means i is not prime.
    vector<bool> isComposite(N + 1, false);
    isComposite[0] = true;
    isComposite[1] = true;

    int limit = floor(sqrt(N));
    for (int x = 2; x <= limit; ++x) {
        if (!isComposite[x]) {
            // Mark multiples of x starting from x*x
            for (int m = x * x; m <= N; m += x) {
                isComposite[m] = true;
            }
        }
    }

    // Collect answer pairs
    vector<pair<int,int>> answer;
    // We only need to consider pairs of the form (2, p)
    // and ensure p+2 ≤ N.
    for (int p = 2; p + 2 <= N; ++p) {
        if (!isComposite[p] && !isComposite[p + 2]) {
            // p is prime and p+2 is prime ⇒ 2+p is prime
            answer.emplace_back(2, p);
        }
    }

    // Output the results
    cout << answer.size() << "\n";
    for (auto &pr : answer) {
        cout << pr.first << " " << pr.second << "\n";
    }

    return 0;
}
```

5. Python Implementation with Detailed Comments  
```python
import sys
import math

def main():
    data = sys.stdin.read().strip().split()
    N = int(data[0])

    # If N < 4, there are no valid pairs (smallest sum is 2+2=4).
    if N < 4:
        print(0)
        return

    # Sieve array where True means composite (not prime).
    is_composite = [False] * (N + 1)
    is_composite[0] = True
    is_composite[1] = True

    limit = int(math.isqrt(N))
    for x in range(2, limit + 1):
        if not is_composite[x]:
            # Mark multiples of x from x*x up to N
            for multiple in range(x * x, N + 1, x):
                is_composite[multiple] = True

    result = []
    # Check primes p such that p+2 ≤ N and both are prime
    for p in range(2, N - 1):
        if not is_composite[p] and not is_composite[p + 2]:
            # We have (2, p) as a valid pair
            result.append((2, p))

    # Output count and pairs
    print(len(result))
    for a, b in result:
        print(a, b)

if __name__ == "__main__":
    main()
```

Explanation of Steps:  
- We first build a standard sieve to identify all primes up to N.  
- We then rely on the fact that except for 2, all primes are odd, so the only way to get a prime sum is 2 + (odd prime).  
- Checking for twin primes p and p+2 directly yields all valid pairs (2, p).  
- Finally, we output the total count and the list of pairs.
<|instruction|>
Solve the below problem. The solution should start with an abridged problem statement. Then key observations. Then full solution based on the observations. Then C++ and Python implementations with comments.

484. Kola
Time limit per test: 0.25 second(s)
Memory limit: 65536 kilobytes
input: standard
output: standard



One day Vasya decided to buy a bottle of his favourite Kola in the old vending machine. But he forgot that there was a Halloween that day, so evil forces had made an inner structure of the vending machine quite complicated. Inside the machine is represented by a table of size n × m. Some of the cells are empty, and some contains obstacles of two types: '/' and '\'. One of the cell initially contains a bottle of Kola. After the purchasing it starts to fall vertically down by the following rules:
If a cell immediately below the bottle is empty, the bottle falls down.
If the bottle falls down from the lowest row, it falls to the tray and Vasya can take it.
Reaching and obstacle '/' ('\') the bottle moves left (right) without changing it's row and tries to continue to fall down if it is possible.
The bottle stops to move when there is a wall in the current moving direction.
The bottle stops to move when it moves from the cell with an obstacle of one type to the cell with an obstacle of another type.
But if the bottle moves to the cell with the same type of obstacle as in the current cell, it continues moving down.


Help Vasya to find out whether the bottle will reach the tray. In case of a positive answer, determine the number of column where it will happen.

Input
The first line of the input contains two integer numbers n and m (1 ≤ n, m ≤ 100). Then the description of the vending machine follows. It consists of n lines of m characters each: '.' means empty cell, 'P' means initial position of the bottle, '/' and '\' — mean obstacles of the corresponding type. It is guaranteed that the 'P' character appears exactly once.

Output
Print to the output -1 if the bottle doesn't reach the tray. Otherwise print the number of the column where the bottle will leave the vending machine. Columns are numbered starting from 1 from the leftmost one.

Example(s)
sample input
sample output
2 3
./P
../
2

sample input
sample output
2 2
.P
\/
-1

sample input
sample output
5 4
.P..
.\..
.//.
./..
/...

<|response|>
1. Abridged Problem Statement  
You have an n×m grid (n,m ≤ 100) representing the inside of a vending machine. Each cell is one of:  
  • ‘.’ empty  
  • ‘/’ or ‘\’ an obstacle  
  • ‘P’ the starting cell of a falling bottle (exactly one ‘P’ in the grid)  
After purchase, the bottle moves as follows from its start position:  
  • If the cell directly below is empty, it falls one row down.  
  • If the cell below is ‘/’, it slides one cell left (same row), then continues to fall.  
  • If the cell below is ‘\’, it slides one cell right, then continues to fall.  
  • If a slide moves it outside the grid or into the opposite obstacle type (‘/’→‘\’ or ‘\’→‘/’), the bottle stops forever.  
  • If it moves off the bottom row, it leaves the machine successfully.  
Output the 1-based column where it exits, or –1 if it never exits.

2. Key Observations  
- The simulation only depends on the cell immediately below the current position.  
- Each step either increases the row by 1 (falling) or stays in the same row while changing column then falls.  
- There are only three possible cell types below: '.', '/', '\'.  
- Sliding into an out-of-bounds column or into the “opposite” obstacle (a conflict) ends the simulation with failure.  
- Since n,m ≤ 100, a direct step-by-step simulation in O(n) time is efficient.

3. Full Solution Approach  
1. Read n, m and the grid (list of strings).  
2. Find the coordinates (r,c) where grid[r][c] == 'P'.  
3. Initialize current row = r+1, current column = c.  
4. While current row < n:  
   a. Let below = grid[current row][current column].  
   b. If below == '.':  
      – current row++  
   c. Else if below == '/':  
      – current column--  
      – If current column < 0 or grid[current row][current column] == '\', terminate with failure.  
      – Else current row++  
   d. Else if below == '\':  
      – current column++  
      – If current column >= m or grid[current row][current column] == '/', terminate with failure.  
      – Else current row++  
5. After the loop:  
   – If we terminated with failure, output –1.  
   – Else (current row == n), we exited successfully; output current column+1 (to convert from 0-based to 1-based).

Time complexity: O(n), since each iteration increases row by 1 and does O(1) work.

4. C++ Implementation with Detailed Comments  
#include <bits/stdc++.h>  
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, m;
    // Read the grid dimensions
    cin >> n >> m;
    vector<string> grid(n);
    for (int i = 0; i < n; i++) {
        cin >> grid[i];
    }

    // Locate the starting position 'P'
    int startR = -1, startC = -1;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (grid[i][j] == 'P') {
                startR = i;
                startC = j;
                break;
            }
        }
        if (startR != -1) break;
    }

    // Begin falling from the row below 'P'
    int row = startR + 1;
    int col = startC;
    bool failed = false;

    // Simulate until we either exit or fail
    while (row < n) {
        char below = grid[row][col];
        if (below == '.') {
            // Empty cell: fall down
            row++;
        }
        else if (below == '/') {
            // Obstacle '/': slide left
            col--;
            // Check for out of bounds or conflict with '\'
            if (col < 0 || grid[row][col] == '\\') {
                failed = true;
                break;
            }
            // From new cell, continue to fall
            row++;
        }
        else { // below == '\\'
            // Obstacle '\': slide right
            col++;
            // Check for out of bounds or conflict with '/'
            if (col >= m || grid[row][col] == '/') {
                failed = true;
                break;
            }
            // Continue falling
            row++;
        }
    }

    if (failed) {
        cout << -1 << "\n";
    } else {
        // If row == n, the bottle has exited the bottom
        cout << (col + 1) << "\n";
    }
    return 0;
}

5. Python Implementation with Detailed Comments  
# Read dimensions  
n, m = map(int, input().split())  
# Read the grid  
grid = [input().rstrip() for _ in range(n)]  

# Find the starting position 'P'  
start_row = start_col = None  
for i in range(n):  
    for j in range(m):  
        if grid[i][j] == 'P':  
            start_row, start_col = i, j  
            break  
    if start_row is not None:  
        break  

# Initialize position just below 'P'  
row = start_row + 1  
col = start_col  
failed = False

# Simulate the fall  
while row < n:  
    below = grid[row][col]  
    if below == '.':  
        # Empty: fall one row  
        row += 1  
    elif below == '/':  
        # Slide left  
        col -= 1  
        # Check failure conditions  
        if col < 0 or grid[row][col] == '\\':  
            failed = True  
            break  
        row += 1  
    else:  # below == '\\'  
        # Slide right  
        col += 1  
        # Check failure conditions  
        if col >= m or grid[row][col] == '/':  
            failed = True  
            break  
        row += 1

# Output result  
if failed:  
    print(-1)  
else:  
    # row == n means successful exit; convert to 1-based column  
    print(col + 1)
1. Concise problem statement  
Given three real numbers c, b, m (each >0), construct any triangle ABC such that  
- |AB| = c  
- |AC| = b  
- The median from A to BC has length m.  
If no such triangle exists, output “Mission impossible.” Otherwise, print coordinates of A, B, C (one per line) with five decimal places.

2. Detailed editorial  
Step 1: Median‐length formula  
In any triangle, the length m of the median from A onto BC satisfies  
 m² = (2b² + 2c² − a²) / 4,  
where a = |BC|, b = |AC|, c = |AB|.  
Rearrange to find a²:  
 a² = 2(b² + c²) − 4m².  
If the right‐hand side is negative, or if the resulting a violates the triangle inequalities (a + b > c, a + c > b, b + c > a), no solution exists.

Step 2: Choose a coordinate system  
Place A at the origin: A = (0, 0).  
Place B on the positive x‐axis at B = (c, 0).  
We now need to place C so that |AC| = b and |BC| = a.  

Step 3: Law of cosines at angle A  
Let θ = ∠BAC. By the law of cosines:  
 cos θ = (|AB|² + |AC|² − |BC|²) / (2·|AB|·|AC|)  
   = (c² + b² − a²) / (2bc).  
Check that −1 ≤ cos θ ≤ 1; then set sin θ = √(1 − cos² θ).  

Step 4: Compute C  
From A = (0,0), vector AC has length b and makes angle θ with the x‐axis, so  
 C = (b·cos θ,  b·sin θ).  

Step 5: Output  
Print A, B, C with five digits after the decimal point. If any check fails, print “Mission impossible.”

3. C++ solution with detailed comments  
```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    // Read inputs: c = |AB|, b = |AC|, m = median length from A to BC
    double c, b, m;
    if (!(cin >> c >> b >> m)) return 0;

    // Compute squared length of BC using median formula: a^2 = 2(b^2 + c^2) - 4m^2
    double inner = 2.0*(b*b + c*c) - 4.0*m*m;
    // If inner < 0, a^2 is negative => no real triangle
    if (inner < 0) {
        cout << "Mission impossible\n";
        return 0;
    }
    double a = sqrt(inner);

    // Check triangle inequalities: a + b > c, a + c > b, b + c > a
    if (a + b <= c || a + c <= b || b + c <= a) {
        cout << "Mission impossible\n";
        return 0;
    }

    // Compute cosine of angle at A using law of cosines
    // cosθ = (AB^2 + AC^2 - BC^2) / (2 * AB * AC) = (c^2 + b^2 - a^2) / (2bc)
    double cosA = (c*c + b*b - a*a) / (2.0 * b * c);
    // Clamp to [-1,1] to avoid small numerical errors
    cosA = max(-1.0, min(1.0, cosA));
    double sinA = sqrt(1.0 - cosA*cosA);

    // Coordinates:
    // A = (0,0)
    // B = (c,0)
    // C = (b*cosA, b*sinA)
    double Ax = 0.0, Ay = 0.0;
    double Bx = c,    By = 0.0;
    double Cx = b * cosA;
    double Cy = b * sinA;

    // Output with fixed precision of 5 decimal places
    cout << fixed << setprecision(5);
    cout << Ax << " " << Ay << "\n";
    cout << Bx << " " << By << "\n";
    cout << Cx << " " << Cy << "\n";

    return 0;
}
```

4. Python solution with detailed comments  
```python
import math
import sys

def find_triangle_coordinates(b, c, m):
    # Based on median formula: m^2 = (2b^2 + 2c^2 - a^2) / 4
    # => a^2 = 2(b^2 + c^2) - 4 m^2
    inner_val = 2 * b*b + 2 * c*c - 4 * m*m
    # If inner_val < 0, no real a exists
    if inner_val < 0:
        return None

    # Compute side a = length of BC
    a = math.sqrt(inner_val)
    # Check triangle inequalities
    if a + b <= c or a + c <= b or b + c <= a:
        return None

    # Compute cos of angle A using law of cosines:
    # cos(A) = (AB^2 + AC^2 - BC^2) / (2*AB*AC)
    cosA = (c*c + b*b - a*a) / (2 * b * c)
    # Clamp to valid range to avoid domain errors
    cosA = max(-1.0, min(1.0, cosA))
    sinA = math.sqrt(1 - cosA*cosA)

    # Place A at (0,0), B at (c, 0)
    # Then C at (b*cosA, b*sinA)
    A = (0.0, 0.0)
    B = (c,   0.0)
    C = (b * cosA, b * sinA)
    return [A, B, C]

def main():
    # Read c, b, m from stdin
    parts = sys.stdin.read().strip().split()
    if len(parts) != 3:
        return
    c, b, m = map(float, parts)

    coords = find_triangle_coordinates(b, c, m)
    if coords is None:
        print("Mission impossible")
        return

    # Print each point with 5 decimal places
    for x, y in coords:
        print(f"{x:.5f} {y:.5f}")

if __name__ == "__main__":
    main()
```

5. Compressed editorial  
- Use median formula: m² = (2b² + 2c² − a²)/4 ⇒ a² = 2(b² + c²) − 4m²  
- Check a² ≥ 0 and triangle inequalities.  
- Place A=(0,0), B=(c,0).  
- Compute cos A = (c² + b² − a²)/(2bc), sin A = √(1−cos² A).  
- Set C=(b cos A, b sin A).  
- If any check fails, print “Mission impossible.”
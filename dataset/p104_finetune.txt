<|instruction|>
Solve the below problem. The solution should start with an abridged problem statement. Then key observations. Then full solution based on the observations. Then C++ and Python implementations with comments.

104. Little shop of flowers

time limit per test: 0.25 sec.
memory limit per test: 4096 KB



PROBLEM

You want to arrange the window of your flower shop in a most pleasant way. You have F bunches of flowers, each being of a different kind, and at least as many vases ordered in a row. The vases are glued onto the shelf and are numbered consecutively 1 through V, where V is the number of vases, from left to right so that the vase 1 is the leftmost, and the vase V is the rightmost vase. The bunches are moveable and are uniquely identified by integers between 1 and F. These id-numbers have a significance: They determine the required order of appearance of the flower bunches in the row of vases so that the bunch i must be in a vase to the left of the vase containing bunch j whenever i < j. Suppose, for example, you have bunch of azaleas (id-number=1), a bunch of begonias (id-number=2) and a bunch of carnations (id-number=3). Now, all the bunches must be put into the vases keeping their id-numbers in order. The bunch of azaleas must be in a vase to the left of begonias, and the bunch of begonias must be in a vase to the left of carnations. If there are more vases than bunches of flowers then the excess will be left empty. A vase can hold only one bunch of flowers.

Each vase has a distinct characteristic (just like flowers do). Hence, putting a bunch of flowers in a vase results in a certain aesthetic value, expressed by an integer. The aesthetic values are presented in a table as shown below. Leaving a vase empty has an aesthetic value of 0.

 	 	
V A S E S

 	 	
1

2

3

4

5

Bunches

1 (azaleas)

7

23

-5

-24

16

2 (begonias)

5

21

-4

10

23

3 (carnations)

-21

5

-4

-20

20

 

According to the table, azaleas, for example, would look great in vase 2, but they would look awful in vase 4.

To achieve the most pleasant effect you have to maximize the sum of aesthetic values for the arrangement while keeping the required ordering of the flowers. If more than one arrangement has the maximal sum value, any one of them will be acceptable. You have to produce exactly one arrangement.

ASSUMPTIONS

1 ≤ F ≤ 100 where F is the number of the bunches of flowers. The bunches are numbered 1 through F.

F
≤ V ≤ 100 where V is the number of vases.

-50 £ Aij £ 50 where Aij is the aesthetic value obtained by putting the flower bunch i into the vase j.

Input


The first line contains two numbers: F, V.

The following F lines: Each of these lines contains V integers, so that Aij is given as the j’th number on the (i+1)’st line of the input file.

Output


The first line will contain the sum of aesthetic values for your arrangement.

The second line must present the arrangement as a list of F numbers, so that the k’th number on this line identifies the vase in which the bunch k is put.
Sample Input

3 5 
7 23 -5 -24 16
5 21 -4 10 23
-21 5 -4 -20 20
Sample Output

53 
2 4 5

<|response|>
1. Abridged Problem Statement  
You have F flowers (numbered 1…F) and V ≥ F vases in a row (numbered 1…V). Placing flower i in vase j yields an aesthetic score A[i][j]; leaving a vase empty gives 0. You must place each flower in exactly one vase so that the vase indices strictly increase with flower indices (flower 1 in a vase left of flower 2’s vase, etc.). Maximize the total aesthetic score and output the maximum sum and one valid assignment of flowers to vases.

2. Key Observations  
- The ordering constraint (flower indices and vase indices both increasing) means we pick an increasing sequence of vase positions of length F.  
- This is equivalent to a DP over two indices: which flower we’re placing next, and which vase we’re considering.  
- At each state (i, j), we decide to either skip vase j (leave it empty) or place flower i there, then move on.  
- There are only O(F·V) states and each transition is O(1), so the total time is O(F·V), which is fine for F,V ≤ 100.

3. Full Solution Approach  
Let dp[i][j] = maximum total aesthetic score when we need to place flowers i…F and can use vases j…V.  
Define flowers indexed 1…F and vases 1…V; for implementation we’ll shift to 0-based (i=0…F-1, j=0…V-1).

Base Cases:  
- dp[F][j] = 0 for all j (no flowers left to place).  
- dp[i][V] = −∞ for all i < F (no vases left but flowers remain → impossible).

Recurrence for 0 ≤ i < F, 0 ≤ j < V:  
- Option 1 (skip vase j): score = dp[i][j+1].  
- Option 2 (use vase j for flower i): score = A[i][j] + dp[i+1][j+1].  
Take dp[i][j] = max(option1, option2).  

We can compute dp in backward order:  
for i from F down to 0:  
  for j from V down to 0:  
    fill dp[i][j] by the above rules.

To reconstruct one optimal assignment, start at i=0, j=0 and repeat until i=F:  
- If dp[i][j] == A[i][j] + dp[i+1][j+1], assign flower i to vase j, then i++ and j++.  
- Otherwise skip this vase: j++.

Finally output dp[0][0] and the chosen vase indices (convert from 0-based to 1-based).

4. C++ Implementation with Detailed Comments  
```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int F, V;
    cin >> F >> V;
    // Read aesthetic scores: A[i][j] for i=0..F-1, j=0..V-1
    vector<vector<int>> A(F, vector<int>(V));
    for (int i = 0; i < F; i++) {
        for (int j = 0; j < V; j++) {
            cin >> A[i][j];
        }
    }

    const int NEG_INF = -1000000000;
    // dp[i][j]: max score placing flowers i..F-1 into vases j..V-1
    vector<vector<int>> dp(F+1, vector<int>(V+1, NEG_INF));

    // Base case: no flowers left => score 0
    for (int j = 0; j <= V; j++) {
        dp[F][j] = 0;
    }

    // Fill dp table in reverse order
    for (int i = F - 1; i >= 0; i--) {
        for (int j = V - 1; j >= 0; j--) {
            // Option 1: skip vase j
            int best = dp[i][j+1];
            // Option 2: place flower i in vase j
            best = max(best, A[i][j] + dp[i+1][j+1]);
            dp[i][j] = best;
        }
    }

    // Output the maximum total score
    cout << dp[0][0] << "\n";

    // Reconstruct one optimal assignment
    vector<int> assignment(F);
    int i = 0, j = 0;
    while (i < F) {
        // If placing flower i at vase j gives the dp value, take it
        if (dp[i][j] == A[i][j] + dp[i+1][j+1]) {
            assignment[i] = j + 1; // convert to 1-based
            i++;
            j++;
        } else {
            // otherwise skip this vase
            j++;
        }
    }

    // Print the chosen vase indices
    for (int k = 0; k < F; k++) {
        cout << assignment[k] << (k+1 < F ? ' ' : '\n');
    }

    return 0;
}
```

5. Python Implementation with Detailed Comments  
```python
import sys
def main():
    input = sys.stdin.readline
    F, V = map(int, input().split())
    # Read aesthetic matrix A
    A = [list(map(int, input().split())) for _ in range(F)]

    NEG_INF = -10**9
    # dp[i][j] = best score for flowers i..F-1 into vases j..V-1
    dp = [[NEG_INF] * (V + 1) for _ in range(F + 1)]
    # Base: no flowers left => zero score
    for j in range(V + 1):
        dp[F][j] = 0

    # Fill dp in reverse order
    for i in range(F-1, -1, -1):
        for j in range(V-1, -1, -1):
            # Option 1: skip vase j
            best = dp[i][j+1]
            # Option 2: place flower i in vase j
            best = max(best, A[i][j] + dp[i+1][j+1])
            dp[i][j] = best

    # Maximum total score
    print(dp[0][0])

    # Reconstruct one assignment
    res = []
    i = j = 0
    while i < F:
        # If taking vase j achieves the dp value, we use it
        if dp[i][j] == A[i][j] + dp[i+1][j+1]:
            res.append(j + 1)  # convert to 1-based
            i += 1
            j += 1
        else:
            j += 1

    print(" ".join(map(str, res)))

if __name__ == "__main__":
    main()
```
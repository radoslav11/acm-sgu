1. Abridged Problem Statement  
You are given two 4-digit strings s (secret) and t (guess), each with distinct digits (leading zeros allowed).  
Compute:  
- Bulls = count of positions i where s[i] == t[i].  
- Cows = count of digits that appear in both s and t but at different positions.  
Output the two values: “bulls cows”.

2. Detailed Editorial  
We must compare two length-4 strings of distinct digits and report:
- Bulls: exact matches in both digit and position.
- Cows: digits present in both strings but in different positions.

Constraints are minimal (always size 4, digits distinct), so an O(1) or O(n) solution is trivial. Here's one clear approach:

Step 1: Count Bulls  
 Traverse indices i = 0..3. Whenever s[i] == t[i], increment bulls.  

Step 2: Record which digits occur in the secret  
 Since the secret’s digits are distinct, we can mark each digit we see. Use either:
 - A boolean array seen[10], indexed by digit character – '0'→0, …, '9'→9.
 - Or a hash/set of characters.

Step 3: Count total “matches” (bulls + cows)  
 Traverse indices i = 0..3 on the guess string t.  
 If t[i] is marked as seen in the secret, increment a counter matches.  
 After this pass, matches counts both bulls (same position) and cows (different position).  

Step 4: Compute cows = matches – bulls.  
 Since every bull was also counted in matches, subtract bulls to get cows.

Overall time and memory are constant. No tricky edge cases beyond the inherent distinctness of digits.

3. Provided C++ Solution with Line-by-Line Comments  
```cpp
#include <bits/stdc++.h>         // all standard headers
#define endl '\n'                // faster endline
using namespace std;

// Utility to update maximum (not used here but included)
template<class T, class T2>
inline void chkmax(T& x, const T2& y) {
    if(x < y) x = y;
}

// Utility to update minimum (not used here but included)
template<class T, class T2>
inline void chkmin(T& x, const T2& y) {
    if(x > y) x = y;
}

string s1, s2;    // s1 = secret, s2 = guess

// Read input: two lines, each a 4-char string
void read() {
    cin >> s1 >> s2;
}

// Solve and print bulls and cows
void solve() {
    map<char, int> c1;            // map to mark which digits appear in secret
    set<char> cows_and_bulls;     // to collect all matching digits
    int bulls = 0;

    // First pass: count bulls and mark secret’s digits
    for(int i = 0; i < s1.size(); i++) {
        if(s1[i] == s2[i]) {
            bulls++;               // same digit in same position
        }
        c1[s1[i]] = 1;            // mark this digit as present
    }

    // Second pass: collect any guess digit that is also in the secret
    for(int i = 0; i < s1.size(); i++) {
        if(c1[s2[i]]) {
            cows_and_bulls.insert(s2[i]);
        }
    }

    // cows_and_bulls.size() counts bulls+cows distinct digits;
    // subtract bulls to get only cows
    cout << bulls << " " << (int)cows_and_bulls.size() - bulls << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    read();
    solve();
    return 0;
}
```

4. Python Solution with Detailed Comments  
```python
# Read the secret and the guess as strings
secret = input().strip()
guess = input().strip()

# Count bulls: positions where characters match exactly
bulls = sum(1 for i in range(4) if secret[i] == guess[i])

# Create a set of secret digits for quick membership tests
secret_digits = set(secret)

# Count total matches (bulls + cows): digits in guess that appear anywhere in secret
matches = sum(1 for ch in guess if ch in secret_digits)

# Cows are matches that are not bulls
cows = matches - bulls

# Output bulls and cows
print(bulls, cows)
```

5. Compressed Editorial  
- Traverse both strings:  
  • bulls = count of i with s[i] == t[i].  
  • Use a set/array to mark secret’s digits.  
- matches = count of guess characters found in secret.  
- cows = matches – bulls.  
Time and space O(1).
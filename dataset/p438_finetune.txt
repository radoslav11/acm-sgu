<|instruction|>
Solve the below problem. The solution should start with an abridged problem statement. Then key observations. Then full solution based on the observations. Then C++ and Python implementations with comments.

438. The Glorious Karlutka River =)
Time limit per test: 0.5 second(s)
Memory limit: 262144 kilobytes
input: standard
output: standard



A group of M tourists are walking along the Karlutka river. They want to cross the river, but they couldn't find a bridge. Fortunately, there are some piles of rubbish floating in the water, and the tourists have decided to try to cross the river by jumping from one pile to another.

A tourist can move up to D meters in any direction at one jump. One jump takes exactly one second. tourists know that the river is W meters wide, and they have estimated the coordinates of rubbish piles (Xi, Yi) and the capacity of each pile (Ci, the maximum number of tourists that this pile can hold at the same time). Rubbish piles are not very large and can be represented as points. The river flows along the X axis. tourists start on the river bank at 0 by Y axis. The Y coordinate of the opposite bank is W.

tourists would like to know if they can get to the opposite bank of the river, and how long it will take.

Input
First line of input consists of four integers: number of rubbish piles N (0 ≤ N ≤ 50), number of tourists M (0 < M ≤ 50), maximum length of tourist's jump D (0 ≤ D ≤ 1000), and width of the river W (0 < W ≤ 1000) Following N lines describe the rubbish piles, each line consists of three integers: (0 < Xi < 1000, 0 < Yi < W, 0 ≤ Ci ≤ 1000) — pile coordinates and capacity.

Output
Output a single number indicating the minimal time (in seconds) in which all tourists will be able to cross the river, or the line "IMPOSSIBLE" if it is impossible to cross the river.

Example(s)
sample input
sample output
3 10 3 7
0 2 2
4 2 2
2 4 3
6

sample input
sample output
3 10 3 8
0 2 2
4 2 2
2 4 3
IMPOSSIBLE

<|response|>
1. Abridged Problem Statement  
   Given a river of width W, M tourists must cross from the near bank (y=0) to the far bank (y=W) by jumping among N floating rubbish piles. Pile i is at coordinates (xi, yi) and can hold up to ci tourists at once. Each jump in any direction covers at most D meters and takes exactly 1 second. Determine the minimal time (in seconds) for all M tourists to cross, or report IMPOSSIBLE if it cannot be done.

2. Key Observations  
   - If D ≥ W, each tourist can jump directly from one bank to the other in 1 second; answer = 1.  
   - Otherwise, tourists may need to use piles as intermediate stepping stones.  
   - Pile capacities force us to limit how many tourists can occupy a pile at the same time.  
   - We can model the crossing process as a flow problem in a *time-expanded network*, where time is discretized into jump steps.  
   - Let K be the maximum number of *inter-pile* jumps we allow.  Then each tourist makes:  
       1 second for bank→pile,  
       K seconds for inter-pile jumps,  
       1 second for pile→bank,  
     for a total of K+2 seconds.  
   - We binary-search the smallest K (0 ≤ K ≤ N+M) such that with at most K inter-pile jumps, we can send M units of flow from source to sink in the time-expanded graph.

3. Full Solution Approach  
   1. Read inputs N, M, D, W and the list of piles (xi, yi, ci).  
   2. If D ≥ W, print 1 and exit.  
   3. Precompute which pairs of piles are within jump distance D (squared distance ≤ D²).  
   4. Binary-search K in [0..N+M]:  
      a. Build a flow network for K inter-pile jumps using (K+1) time layers t=0..K.  
      b. For each layer t and each pile i, create two nodes: in(t,i) and out(t,i).  
      c. Add an edge in(t,i)→out(t,i) with capacity = ci (pile capacity).  
      d. For each t, if yi ≤ D, add edge source→in(t,i) with infinite capacity (reachable from near bank at that time).  
      e. If yi + D ≥ W, add edge out(t,i)→sink with infinite capacity (can jump to far bank).  
      f. For t=1..K and each pair (j→i) where dist(pile j, pile i) ≤ D, add edge out(t−1,j)→in(t,i) with infinite capacity.  
      g. Compute max-flow.  If flow ≥ M, record K and continue search in the lower half; otherwise search upper half.  
   5. If no feasible K found, output IMPOSSIBLE.  Otherwise, the answer in seconds = K + 2.

   Complexity:  
   - Time layers ≤ N+M ≤ 100.  
   - Nodes O((K+1)*N), edges O((K+1)*(N + N²)).  
   - Dinic or similar max-flow runs comfortably within limits for N,M≤50.

4. C++ Implementation with Detailed Comments  
```cpp
#include <bits/stdc++.h>
using namespace std;

// Dinic's max-flow implementation
struct Dinic {
    struct Edge {
        int to, rev;
        int cap;
    };
    int n, S, T;
    vector<vector<Edge>> adj;
    vector<int> level, ptr;
    const int INF = 1000000000;

    Dinic(int n_) : n(n_), adj(n_), level(n_), ptr(n_) {}

    // add edge u->v with capacity c (and reverse edge v->u with cap 0)
    void addEdge(int u, int v, int c) {
        adj[u].push_back({v, (int)adj[v].size(), c});
        adj[v].push_back({u, (int)adj[u].size()-1, 0});
    }

    bool bfs() {
        fill(level.begin(), level.end(), -1);
        queue<int> q;
        level[S] = 0;
        q.push(S);
        while (!q.empty()) {
            int u = q.front(); q.pop();
            for (auto &e : adj[u]) {
                if (level[e.to] < 0 && e.cap > 0) {
                    level[e.to] = level[u] + 1;
                    q.push(e.to);
                }
            }
        }
        return level[T] >= 0;
    }

    int dfs(int u, int pushed) {
        if (u == T || pushed == 0) return pushed;
        for (int &cid = ptr[u]; cid < (int)adj[u].size(); cid++) {
            auto &e = adj[u][cid];
            if (level[e.to] != level[u] + 1 || e.cap == 0) continue;
            int tr = dfs(e.to, min(pushed, e.cap));
            if (tr > 0) {
                e.cap -= tr;
                adj[e.to][e.rev].cap += tr;
                return tr;
            }
        }
        return 0;
    }

    int maxflow(int S_, int T_) {
        S = S_; T = T_;
        int flow = 0;
        while (bfs()) {
            fill(ptr.begin(), ptr.end(), 0);
            while (int pushed = dfs(S, INF)) {
                flow += pushed;
            }
        }
        return flow;
    }
};

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int N, M, D, W;
    cin >> N >> M >> D >> W;
    vector<tuple<int,int,int>> piles(N);
    for(int i = 0; i < N; i++){
        int x,y,c;
        cin >> x >> y >> c;
        piles[i] = make_tuple(x,y,c);
    }

    // Special case: direct bank-to-bank jump
    if (D >= W) {
        // One jump of ≤ D covers the width
        cout << 1 << "\n";
        return 0;
    }

    // Precompute which pile-pile distances are ≤ D
    vector<vector<bool>> canJump(N, vector<bool>(N, false));
    for(int i = 0; i < N; i++){
        auto [x1,y1,c1] = piles[i];
        for(int j = 0; j < N; j++){
            auto [x2,y2,c2] = piles[j];
            long long dx = x1 - x2, dy = y1 - y2;
            if (dx*dx + dy*dy <= 1LL*D*D)
                canJump[i][j] = true;
        }
    }

    // Binary search on K = number of inter-pile jumps
    int lo = 0, hi = N + M, best = -1;
    while (lo <= hi) {
        int K = (lo + hi) / 2;
        int layers = K + 1;  
        // Node indexing:
        // source = 0, sink = 1
        // then for each t in [0..K], each pile i, two nodes:
        //   in_node(t,i)  = 2 + (t*N + i)*2
        //   out_node(t,i) = 2 + (t*N + i)*2 + 1
        int totalNodes = 2 + layers * N * 2;
        int SRC = 0, SNK = 1;
        Dinic dinic(totalNodes);

        auto in_id = [&](int t, int i){
            return 2 + (t*N + i)*2;
        };
        auto out_id = [&](int t, int i){
            return 2 + (t*N + i)*2 + 1;
        };

        // Build the time-expanded network
        for(int t = 0; t < layers; t++){
            for(int i = 0; i < N; i++){
                auto [x,y,c] = piles[i];
                // 1) capacity of pile i at time t
                dinic.addEdge(in_id(t,i), out_id(t,i), c);

                // 2) can jump from near bank to pile i at time t?
                if (y <= D) {
                    // infinite cap from source
                    dinic.addEdge(SRC, in_id(t,i), Dinic::INF);
                }
                // 3) can jump from pile i at time t to far bank?
                if (y + D >= W) {
                    dinic.addEdge(out_id(t,i), SNK, Dinic::INF);
                }
                // 4) inter-pile jumps from previous layer
                if (t > 0) {
                    for(int j = 0; j < N; j++){
                        if (canJump[j][i]) {
                            dinic.addEdge(out_id(t-1,j), in_id(t,i), Dinic::INF);
                        }
                    }
                }
            }
        }

        // Compute max-flow for K inter-pile jumps
        int flow = dinic.maxflow(SRC, SNK);
        if (flow >= M) {
            best = K;
            hi = K - 1;  // try smaller K
        } else {
            lo = K + 1;  // need more jumps
        }
    }

    if (best < 0) {
        cout << "IMPOSSIBLE\n";
    } else {
        // Total time = 1 (bank→pile) + best (inter-pile) + 1 (pile→bank)
        cout << best + 2 << "\n";
    }
    return 0;
}
```

5. Python Implementation with Detailed Comments  
```python
import sys
from collections import deque

class Dinic:
    def __init__(self, n):
        self.n = n
        self.adj = [[] for _ in range(n)]
        self.level = [0]*n
        self.ptr = [0]*n
        self.INF = 10**18

    def add_edge(self, u, v, cap):
        # forward edge: (to, capacity, rev-index)
        self.adj[u].append([v, cap, len(self.adj[v])])
        # backward edge: (to=u, capacity=0, rev-index)
        self.adj[v].append([u, 0, len(self.adj[u]) - 1])

    def bfs(self, S, T):
        for i in range(self.n):
            self.level[i] = -1
        queue = deque([S])
        self.level[S] = 0
        while queue:
            u = queue.popleft()
            for v, cap, rev in self.adj[u]:
                if cap > 0 and self.level[v] < 0:
                    self.level[v] = self.level[u] + 1
                    queue.append(v)
        return self.level[T] >= 0

    def dfs(self, u, T, pushed):
        if u == T or pushed == 0:
            return pushed
        for cid in range(self.ptr[u], len(self.adj[u])):
            self.ptr[u] = cid
            v, cap, rev = self.adj[u][cid]
            if cap > 0 and self.level[v] == self.level[u] + 1:
                tr = self.dfs(v, T, min(pushed, cap))
                if tr > 0:
                    # update capacities along the path
                    self.adj[u][cid][1] -= tr
                    self.adj[v][rev][1] += tr
                    return tr
        return 0

    def maxflow(self, S, T):
        flow = 0
        while self.bfs(S, T):
            self.ptr = [0]*self.n
            while True:
                pushed = self.dfs(S, T, self.INF)
                if pushed == 0:
                    break
                flow += pushed
        return flow

def solve():
    data = list(map(int, sys.stdin.read().split()))
    it = iter(data)
    N, M, D, W = next(it), next(it), next(it), next(it)
    piles = []
    for _ in range(N):
        x, y, c = next(it), next(it), next(it)
        piles.append((x, y, c))

    # Direct jump from bank to bank
    if D >= W:
        print(1)
        return

    # Precompute adjacency of piles by jump distance
    can_jump = [[False]*N for _ in range(N)]
    for i in range(N):
        x1,y1,_ = piles[i]
        for j in range(N):
            x2,y2,_ = piles[j]
            if (x1-x2)**2 + (y1-y2)**2 <= D*D:
                can_jump[i][j] = True

    # Binary search for minimal K inter-pile jumps
    lo, hi, answer = 0, N+M, -1
    while lo <= hi:
        K = (lo + hi)//2
        layers = K + 1
        # total nodes = 2 (src,snk) + layers*N*2
        SRC, SNK = 0, 1
        node_count = 2 + layers*N*2
        dinic = Dinic(node_count)

        def in_id(t, i):
            return 2 + (t*N + i)*2
        def out_id(t, i):
            return 2 + (t*N + i)*2 + 1

        # Build time-expanded network
        for t in range(layers):
            for i,(x,y,c) in enumerate(piles):
                # in->out with capacity c
                dinic.add_edge(in_id(t,i), out_id(t,i), c)
                # source->in if reachable from near bank
                if y <= D:
                    dinic.add_edge(SRC, in_id(t,i), dinic.INF)
                # out->sink if can reach far bank
                if y + D >= W:
                    dinic.add_edge(out_id(t,i), SNK, dinic.INF)
                # transitions from previous layer
                if t > 0:
                    for j in range(N):
                        if can_jump[j][i]:
                            dinic.add_edge(out_id(t-1,j), in_id(t,i), dinic.INF)

        f = dinic.maxflow(SRC, SNK)
        if f >= M:
            answer = K
            hi = K - 1
        else:
            lo = K + 1

    if answer < 0:
        print("IMPOSSIBLE")
    else:
        # Total time = 1 (bank→pile) + answer (inter-pile) + 1 (pile→bank)
        print(answer + 2)

if __name__ == "__main__":
    solve()
```

Explanation Highlights:  
- We discretize time into *layers* corresponding to how many inter-pile jumps have occurred.  
- Each pile at each time layer gets an “in” and an “out” node; the in→out edge enforces the pile’s capacity.  
- We link from the source to any in-node of a pile that is within D of the start bank (infinite capacity), and from any out-node of a pile within D of the far bank to the sink.  
- Inter-pile jumps are modeled by infinite-capacity edges from out(t−1,j) to in(t,i) whenever two piles are within D.  
- We binary-search the number of inter-pile jumps K needed so that the max-flow ≥ M, then add 2 to get total seconds.
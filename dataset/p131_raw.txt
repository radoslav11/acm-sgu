p131.cpp
======================
#include <bits/stdc++.h>
#include <bitset>

using namespace std;

template<typename T1, typename T2>
ostream& operator<<(ostream& out, const pair<T1, T2>& x) {
    return out << x.first << ' ' << x.second;
}

template<typename T1, typename T2>
istream& operator>>(istream& in, pair<T1, T2>& x) {
    return in >> x.first >> x.second;
}

template<typename T>
istream& operator>>(istream& in, vector<T>& a) {
    for(auto& x: a) {
        in >> x;
    }
    return in;
};

template<typename T>
ostream& operator<<(ostream& out, const vector<T>& a) {
    for(auto x: a) {
        out << x << ' ';
    }
    return out;
};

int n, m;

void read() { cin >> n >> m; }

void solve() {
    // vector<vector<int64_t>> can_cover(1 << m, vector<int64_t>(1 << m,
    // false));

    // can_cover[0][0] = 1;
    // for(int mask = 0; mask < (1 << m); mask++) {
    //     for(int nmask = 0; nmask < (1 << m); nmask++) {
    //         int i = m - 1;
    //         while(i >= 0 && !(mask & (1 << i)) && !(nmask & (1 << i))) {
    //             i--;
    //         }

    //         if(i == -1) {
    //             continue;
    //         }

    //         if((mask & (1 << i)) && (nmask & (1 << i))) {
    //             can_cover[mask][nmask] +=
    //                 can_cover[mask ^ (1 << i)][nmask ^ (1 << i)];
    //         }

    //         if(i > 0 && (mask & (1 << i)) && (mask & (1 << (i - 1)))) {
    //             can_cover[mask][nmask] +=
    //                 can_cover[mask ^ (1 << i) ^ (1 << (i - 1))][nmask];
    //         }

    //         if(i > 0 && (nmask & (1 << i)) && (nmask & (1 << (i - 1)))) {
    //             can_cover[mask][nmask] +=
    //                 can_cover[mask][nmask ^ (1 << i) ^ (1 << (i - 1))];
    //         }

    //         if(i > 0 && (mask & (1 << i)) && (nmask & (1 << (i - 1))) &&
    //            (nmask & (1 << i))) {
    //             can_cover[mask][nmask] +=
    //                 can_cover[mask ^ (1 << i)]
    //                          [nmask ^ (1 << i) ^ (1 << (i - 1))];
    //         }

    //         if(i > 0 && (mask & (1 << (i - 1))) && (nmask & (1 << i)) &&
    //            (nmask & (1 << (i - 1)))) {
    //             can_cover[mask][nmask] +=
    //                 can_cover[mask ^ (1 << (i - 1))]
    //                          [nmask ^ (1 << i) ^ (1 << (i - 1))];
    //         }

    //         if(i > 0 && (nmask & (1 << i)) && (mask & (1 << (i - 1))) &&
    //            (nmask & (1 << i))) {
    //             can_cover[mask][nmask] +=
    //                 can_cover[mask ^ (1 << (i - 1))]
    //                          [nmask ^ (1 << i) ^ (1 << (i - 1))];
    //         }

    //         if(i > 0 && (nmask & (1 << i)) && (mask & (1 << (i - 1))) &&
    //            (mask & (1 << (i - 1)))) {
    //             can_cover[mask][nmask] +=
    //                 can_cover[mask ^ (1 << (i - 1))]
    //                          [nmask ^ (1 << i) ^ (1 << (i - 1))];
    //         }

    //         cout << bitset<3>(mask) << '\n'
    //              << bitset<3>(nmask) << '\n'
    //              << can_cover[mask][nmask] << '\n';
    //         cout << ">>>> " << i << '\n';
    //         cout << '\n';
    //     }
    // }

    // vector<vector<int64_t>> dp(n + 1, vector<int64_t>(1 << m, 0));
    // dp[0][(1 << m) - 1] = 1;
    // for(int i = 1; i <= n; i++) {
    //     for(int mask = 0; mask < (1 << m); mask++) {
    //         for(int nmask = 0; nmask < (1 << m); nmask++) {
    //             dp[i][nmask] +=
    //                 can_cover[mask ^ ((1 << m) - 1)][nmask] * dp[i -
    //                 1][mask];
    //         }
    //     }
    // }

    if(n == 1 || m == 1) {
        cout << (n + m) % 2 << endl;
        return;
    }

    vector<vector<int64_t>> dp(n * m + 1, vector<int64_t>(1 << (m + 1), 0));
    int total_mask = (1 << (m + 1)) - 1;

    dp[0][0] = 1;
    for(int p = 0; p < n * m; p++) {
        for(int mask = 0; mask < (1 << (m + 1)); mask++) {
            if(!dp[p][mask]) {
                continue;
            }

            int i = p / m, j = p % m;
            if((p > m && (mask & (1 << m))) || p <= m) {
                dp[p + 1][(mask << 1) & total_mask] += dp[p][mask];
            }

            //  XXXXXX
            // X..
            if(j > 0 && !(mask & 1)) {
                if((p > m && (mask & (1 << m))) || p <= m) {
                    dp[p + 1][((mask << 1) | 3) & total_mask] += dp[p][mask];
                }
            }

            //  X.XXXX
            // XX.
            if(i > 0 && !(mask & (1 << (m - 1)))) {
                if((p > m && (mask & (1 << m))) || p <= m) {
                    dp[p + 1][((mask << 1) | 1 | (1 << m)) & total_mask] +=
                        dp[p][mask];
                }
            }

            //  X.XXXX
            // X..
            if(i > 0 && j > 0 && !(mask & (1 << (m - 1))) && !(mask & 1)) {
                if((p > m && (mask & (1 << m))) || p <= m) {
                    dp[p + 1][((mask << 1) | 3 | (1 << m)) & total_mask] +=
                        dp[p][mask];
                }
            }

            //  ..XXXX
            // XX.
            if(i > 0 && j > 0 && !(mask & (1 << (m - 1))) &&
               !(mask & (1 << m))) {
                dp[p + 1][((mask << 1) | 1 | (1 << m)) & total_mask] +=
                    dp[p][mask];
            }

            //  .XXXXX
            // X..
            if(i > 0 && j > 0 && !(mask & (1 << m)) && !(mask & 1)) {
                dp[p + 1][((mask << 1) | 3) & total_mask] += dp[p][mask];
            }

            //  X..XXX
            // XX.
            if(i > 0 && j + 1 < m && !(mask & (1 << (m - 1))) &&
               !(mask & (1 << (m - 2)))) {
                if((p > m && (mask & (1 << m))) || p <= m) {
                    dp[p + 1]
                      [((mask << 1) | 1 | (1 << (m - 1)) | (1 << m)) &
                       total_mask] += dp[p][mask];
                }
            }
        }
    }

    cout << dp[n * m][total_mask] << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int T = 1;
    // cin >> T;
    for(int test = 1; test <= T; test++) {
        read();
        // cout << "Case #" << test << ": ";
        solve();
    }

    return 0;
}

=================
statement.txt
======================
131. Hardwood floor

time limit per test: 0.25 sec.
memory limit per test: 4096 KB


The banquet hall of Computer Scientists' Palace has a rectangular form of the size M x N (1<=M<=9, 1<=N<=9). It is necessary to lay hardwood floors in the hall. There are wood pieces of two forms:
1) rectangles (2x1)
2) corners (squares 2x2 without one 1x1 square)
You have to determine X - the number of ways to cover the banquet hall.
Remarks. The number of pieces is large enough. It is not allowed to leave empty places, or to cover any part of a surface twice, or to saw pieces.


Input

The first line contains natural number M. The second line contains a natural number N.


Output

First line should contain the number X, or 0 if there are no solutions.


Sample Input

2 3
Sample Output

5
Author	: Herman "Smash" Narkaytis, Paul "Stingray" Komkoff
Resource	: 5th Southern Subregional Contest. Saratov 2002
Date	: 2002-10-10

=================

1. Abridged Problem Statement  
   You have N petals and a cyclic list of M phrases. Starting from the first phrase, you “pluck” each petal in turn, pronouncing the next phrase in the list (wrapping around to the first after the last). Determine which phrase is spoken on the N-th (last) petal.

2. Detailed Editorial  
   - We label the phrases P[0], P[1], …, P[M-1].  
   - On the first petal, you speak P[0]; on the second, P[1]; …; after P[M-1], you wrap back to P[0].  
   - Thus the k-th petal uses phrase index (k−1) mod M.  
   - You need the phrase for k = N, so compute idx = (N−1) mod M, then output P[idx].  
   - Time complexity is O(M) for input reading and O(1) for computing the answer. Memory is O(M·L) where L is max phrase length.

3. Provided C++ Solution with Detailed Comments  
```cpp
#include <bits/stdc++.h>
#define endl '\n'
using namespace std;

int n, m;              // n = number of phrases, m = number of petals
vector<string> s;      // to store the M phrases

// Read input: first two integers, then M lines of phrases
void read() {
    cin >> m >> n;     // read m=N petals, n=M phrases
    s.resize(n);
    for(int i = 0; i < n; i++) {
        cin >> s[i];   // read each phrase
    }
}

// Compute and print the resulting phrase
void solve() {
    // We want the (m)-th petal, but zero‐based index = (m−1)
    // Then wrap around by modulo n
    int idx = (m - 1) % n;
    cout << s[idx] << endl;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    read();    // read inputs
    solve();   // process and output
    return 0;
}
```

4. Python Solution with Detailed Comments  
```python
def main():
    import sys
    data = sys.stdin.read().split()
    # data[0] = N (number of petals)
    # data[1] = M (number of phrases)
    # data[2..] = the M phrases
    N = int(data[0])
    M = int(data[1])
    phrases = data[2:]  # list of M strings

    # The phrase spoken on the N-th petal is at index (N-1) mod M
    idx = (N - 1) % M
    print(phrases[idx])

if __name__ == "__main__":
    main()
```

5. Compressed Editorial  
Compute `(N−1) mod M` to get the zero-based index of the phrase spoken on the last (N-th) petal; read phrases into an array and output the one at that index.
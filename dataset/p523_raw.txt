p523.cpp
======================
#include <bits/stdc++.h>

using namespace std;

template<typename T1, typename T2>
ostream& operator<<(ostream& out, const pair<T1, T2>& x) {
    return out << x.first << ' ' << x.second;
}

template<typename T1, typename T2>
istream& operator>>(istream& in, pair<T1, T2>& x) {
    return in >> x.first >> x.second;
}

template<typename T>
istream& operator>>(istream& in, vector<T>& a) {
    for(auto& x: a) {
        in >> x;
    }
    return in;
};

template<typename T>
ostream& operator<<(ostream& out, const vector<T>& a) {
    for(auto x: a) {
        out << x << ' ';
    }
    return out;
};

int n, f;
vector<int> a;

void read() {
    cin >> n >> f;
    a.resize(n);
    cin >> a;
}

void solve() {
    int tgt = a[0];
    vector<int> ans;
    while(!a.empty()) {
        bool added = false;
        while(true) {
            auto it = find(a.begin(), a.end(), f);
            if(it != a.end()) {
                if(!added) {
                    ans.push_back(f);
                }
                added = true;
                a.erase(it);
            } else {
                break;
            }
        }

        if(tgt == f) {
            if(a.empty()) {
                break;
            } else {
                tgt = a[0];
            }
        }

        if(tgt > f) {
            f++;
        } else {
            f--;
        }
    }

    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int T = 1;
    // cin >> T;
    for(int test = 1; test <= T; test++) {
        read();
        // cout << "Case #" << test << ": ";
        solve();
    }

    return 0;
}

=================
statement.txt
======================
523. Elevator
Time limit per test: 0.25 second(s)
Memory limit: 262144 kilobytes
input: standard
output: standard

The Berland State Building is the highest building in the capital of Berland. Curious Polikarp was studying the principle of operation of an elevator in the Berland State Building for a quite a while. Recently he has finally understood the algorithm behind its operation, in case a person enters the elevator on the floor f and presses the floor buttons e1, e2,..., en one by one. The buttons are pressed sequentially but very quickly while the elevator is still located on the floor f. All the pressed buttons are distinct and differ from the floor f. No other button pressings are considered in this problem.

After the buttons e1, e2,..., en have been pressed, all of them become highlighted and the elevator starts moving according the following rules:


The elevator starts moving towards the floor, the button of which is highlighted and pressed first among all highlighted buttons. Say, it's floor/button a.

If on its way to a the elevator passes the floor b, the button of which is highlighted, it stops there, the light goes out for the button b unhighlighting it, and the floor b is considered visited. Then the elevator continues moving towards the floor a. It is possible that there will be more than one floor such as b on the way to floor a — all these floors will be passed one by one according to the described algorithm.

Having reached the floor a, the elevator stops there, the light goes out for the button a unhighlighting it, and the floor a is considered visited. Then the elevator starts to move towards the floor, the button of which has been pressed the earliest among the currently highlighted buttons. That floor becomes a new value of a. The elevator continues moving according to the rules described in the previous paragraph. If it's impossible to find a new value for a because there are no highlighted floor buttons, it means that all floors have been visited and the elevator stops.


Now, when the principle of the elevator's operation is clear, Polikarp wants to experiment with the elevator's movements without the elevator itself. He wants to write a program that simulates elevator's operation. Unfortunately, he didn't attend any programming lessons and it's a challenge for him. Can you please help Polikarp and write a program which will simulate movements of the elevator?

Input
The first line of input contains a pair of integers n, f (1 ≤ n, f ≤ 100), where n — amount of pressings made, f — index of the current floor where all these pressings were made. The second line contains distinct integers e1, e2,..., en (1 ≤ ei ≤ 100, ei ≠q f) — buttons indices in the order they were pressed.

Output
Output all the floors where the elevator stops, in a chronological order of the stops.

Example(s)
sample input
sample output
4 5
10 9 2 1
9 10 2 1 

sample input
sample output
4 3
2 4 1 5
2 4 1 5 

=================

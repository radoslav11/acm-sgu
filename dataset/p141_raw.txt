p141.py
======================
def extended_gcd(a: int, b: int) -> tuple[int, int, int]:
    if b == 0:
        return a, 1, 0
    gcd, x1, y1 = extended_gcd(b, a % b)
    x = y1
    y = x1 - (a // b) * y1
    return gcd, x, y


def solve_problem(x1: int, x2: int, p: int, k: int) -> None:
    g, p1, p2 = extended_gcd(x1, x2)

    if p % g != 0:
        print("NO")
        return

    dx = x2 // g
    dy = x1 // g
    p1 *= p // g
    p2 *= p // g

    while abs(p1 + dx) + abs(p2 - dy) < abs(p1) + abs(p2):
        p1 += dx
        p2 -= dy
    while abs(p1 - dx) + abs(p2 + dy) < abs(p1) + abs(p2):
        p1 -= dx
        p2 += dy

    if abs(p1) + abs(p2) > k:
        print("NO")
        return

    n1, n2 = 0, 0
    last = k - abs(p1) - abs(p2)
    if last % 2 == 0:
        if p1 < 0:
            n1 = -p1
            p1 = 0
        if p2 < 0:
            n2 = -p2
            p2 = 0
        p1 += last // 2
        n1 += last // 2
    else:
        if (dx + dy) % 2 == 0:
            print("NO")
            return
        if abs(p1 + dx) + abs(p2 - dy) < abs(p1 - dx) + abs(p2 + dy):
            p1 += dx
            p2 -= dy
        else:
            p1 -= dx
            p2 += dy
        if abs(p1) + abs(p2) > k:
            print("NO")
            return
        last = k - abs(p1) - abs(p2)
        if p1 < 0:
            n1 = -p1
            p1 = 0
        if p2 < 0:
            n2 = -p2
            p2 = 0
        p1 += last // 2
        n1 += last // 2

    print("YES")
    print(p1, n1, p2, n2)


def main():
    x1, x2, p, k = map(int, input().split())
    solve_problem(x1, x2, p, k)


if __name__ == "__main__":
    main()

=================
statement.txt
======================
141. Jumping Joe

time limit per test: 0.25 sec.
memory limit per test: 4096 KB


Joe is a frog who likes to jump a lot. In fact, that's all he does: he jumps forwards and backwards on the integer axis (a straight line on which all the integer numbers, both positive and negative are marked). At first, Joe sits next to the point marked with 0. From here, he can jump in the positive or the negative direction a distance equal to either x1 or x2. From the point where he arrived, he can jump again a distance equal to x1 or x2, in the positive or the negative direction and so on.. Joe wants to arrive next to the point marked with the number P, after exactly K jumps. You have to decide whether such a thing is possible.


Input

The input will contain four integers: x1, x2 (0 < x1 , x2 < 40 000), P (-40 000 < P  < 40 000) and K (0 <= K < 2 000 000 000), separated by blanks.


Output

The first line of output will contain the word "YES", in case Joe can reach the point marked with P after exactly K jumps, or "NO", otherwise. In case the answer is "YES", the next line should contain four integers, separated by blanks: P1 , N1 , P2 and N2. P1 is the number of times Joe jumped in the positive direction a distance equal to x1. N1 is the number of times Joe jumped in the negative direction a distance equal to x1. P2 is the number of times Joe jumped in the positive direction a distance equal to x2. N2 is the number of times Joe jumped in the negative direction a distance equal to x2. In other words, you should find four non-negative integers, so that:

P1*x1 - N1*x1 + P2*x2 - N2*x2 = P
P1 + N1 + P2 + N2 = K

In case there are more quadruples (P1,N1,P2,N2) which are solutions for the problem, you may print any of them.


Sample Input

2 3 -1 12
Sample Output

YES
1 0 5 6
Author	: Mugurel Ionut Andreica
Resource	: SSU::Online Contester Fall Contest #2
Date	: Fall 2002


=================

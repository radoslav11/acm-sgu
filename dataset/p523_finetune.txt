<|instruction|>
Solve the below problem. The solution should start with an abridged problem statement. Then key observations. Then full solution based on the observations. Then C++ and Python implementations with comments.

523. Elevator
Time limit per test: 0.25 second(s)
Memory limit: 262144 kilobytes
input: standard
output: standard

The Berland State Building is the highest building in the capital of Berland. Curious Polikarp was studying the principle of operation of an elevator in the Berland State Building for a quite a while. Recently he has finally understood the algorithm behind its operation, in case a person enters the elevator on the floor f and presses the floor buttons e1, e2,..., en one by one. The buttons are pressed sequentially but very quickly while the elevator is still located on the floor f. All the pressed buttons are distinct and differ from the floor f. No other button pressings are considered in this problem.

After the buttons e1, e2,..., en have been pressed, all of them become highlighted and the elevator starts moving according the following rules:


The elevator starts moving towards the floor, the button of which is highlighted and pressed first among all highlighted buttons. Say, it's floor/button a.

If on its way to a the elevator passes the floor b, the button of which is highlighted, it stops there, the light goes out for the button b unhighlighting it, and the floor b is considered visited. Then the elevator continues moving towards the floor a. It is possible that there will be more than one floor such as b on the way to floor a — all these floors will be passed one by one according to the described algorithm.

Having reached the floor a, the elevator stops there, the light goes out for the button a unhighlighting it, and the floor a is considered visited. Then the elevator starts to move towards the floor, the button of which has been pressed the earliest among the currently highlighted buttons. That floor becomes a new value of a. The elevator continues moving according to the rules described in the previous paragraph. If it's impossible to find a new value for a because there are no highlighted floor buttons, it means that all floors have been visited and the elevator stops.


Now, when the principle of the elevator's operation is clear, Polikarp wants to experiment with the elevator's movements without the elevator itself. He wants to write a program that simulates elevator's operation. Unfortunately, he didn't attend any programming lessons and it's a challenge for him. Can you please help Polikarp and write a program which will simulate movements of the elevator?

Input
The first line of input contains a pair of integers n, f (1 ≤ n, f ≤ 100), where n — amount of pressings made, f — index of the current floor where all these pressings were made. The second line contains distinct integers e1, e2,..., en (1 ≤ ei ≤ 100, ei ≠q f) — buttons indices in the order they were pressed.

Output
Output all the floors where the elevator stops, in a chronological order of the stops.

Example(s)
sample input
sample output
4 5
10 9 2 1
9 10 2 1 

sample input
sample output
4 3
2 4 1 5
2 4 1 5

<|response|>
1. Abridged Problem Statement  
You have an elevator initially at floor f. A sequence of n distinct buttons e₁,…,eₙ (none equal to f) is pressed in order; these floors become “highlighted.” The elevator then visits all highlighted floors according to this rule:  
- Always head toward the earliest-pressed remaining highlighted floor a.  
- Move one floor at a time; whenever you reach any highlighted floor b (whether it’s on the direct path to a or b=a), you stop there, unhighlight b, and record that stop.  
- After unhighlighting a, pick the next earliest-pressed highlighted floor as the new target and repeat, until no highlighted floors remain.  

Output the floors in the exact order the elevator stops.

2. Key Observations  
- The “pending stops” always form the list of unvisited highlighted floors, kept in the original press order.  
- At each stage, the elevator has:  
  • A current floor `cur`.  
  • A target floor `tgt` = the first element of the pending list.  
- The elevator moves in steps of ±1 toward `tgt`.  
- If `cur` matches any pending floor, you immediately stop there, remove it from the pending list, output it, and—if it was `tgt`—reset `tgt` to the new first element.  
- You repeat this until the pending list is empty.

3. Full Solution Approach  
- Read `n, f`. Read array `pending` of size n (the pressed floors in order).  
- Initialize:  
  cur = f  
  tgt = pending[0]  
  ans = empty list of stops  
- While `pending` is nonempty:  
  1. If `cur` is in `pending`:  
     a. Append `cur` to `ans`.  
     b. Check if `cur == tgt`; erase `cur` from `pending`.  
     c. If `pending` is now empty, break.  
     d. If you erased the old target, set `tgt = pending[0]`.  
  2. Else (or after handling removal) move one step:  
     if `cur < tgt`, do `cur++`; else if `cur > tgt`, do `cur--`.  
- Print the recorded stops in `ans`.

Time complexity is O(n * (search + removal + floor moves)), all bounded by ≤100, so it’s efficient for n,f ≤100.

4. C++ Implementation with Detailed Comments  
```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, f;
    cin >> n >> f;
    vector<int> pending(n);
    for (int i = 0; i < n; i++) {
        cin >> pending[i];
    }

    int cur = f;
    int tgt = pending[0];             // current target = first pressed floor
    vector<int> ans;                  // to record the stops

    // Continue until all pending floors are visited
    while (!pending.empty()) {
        // If current floor is one of the pending stops, visit it
        auto it = find(pending.begin(), pending.end(), cur);
        if (it != pending.end()) {
            ans.push_back(cur);       // record the stop
            bool wasTarget = (cur == tgt);
            pending.erase(it);        // unhighlight this floor
            if (pending.empty()) {
                break;                // done if no floors left
            }
            if (wasTarget) {
                // pick the next earliest-pressed as new target
                tgt = pending[0];
            }
        }
        // If we still have pending stops, move one floor toward tgt
        if (!pending.empty()) {
            if (cur < tgt) {
                cur++;
            } else if (cur > tgt) {
                cur--;
            }
            // If cur == tgt, the next loop iteration will detect and remove it
        }
    }

    // Output the stops in order
    for (int floor : ans) {
        cout << floor << ' ';
    }
    cout << "\n";
    return 0;
}
```

5. Python Implementation with Detailed Comments  
```python
def main():
    import sys

    data = sys.stdin.read().split()
    n, cur = map(int, data[:2])
    pending = list(map(int, data[2:]))

    tgt = pending[0]  # current target = first pressed floor
    ans = []          # to record the stops

    # Loop until no pending floors remain
    while pending:
        # If we're on a pending floor, visit it immediately
        if cur in pending:
            ans.append(cur)
            was_target = (cur == tgt)
            pending.remove(cur)
            if not pending:
                break
            if was_target:
                # update target to next earliest-pressed
                tgt = pending[0]

        # Move one floor toward the target if needed
        if pending:
            if cur < tgt:
                cur += 1
            elif cur > tgt:
                cur -= 1
            # if cur == tgt, next iteration will remove it

    # Print the result
    print(' '.join(map(str, ans)))

if __name__ == "__main__":
    main()
```
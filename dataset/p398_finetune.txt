<|instruction|>
Solve the below problem. The solution should start with an abridged problem statement. Then key observations. Then full solution based on the observations. Then C++ and Python implementations with comments.

398. Friends of Friends
Time limit per test: 0.25 second(s)
Memory limit: 65536 kilobytes
input: standard
output: standard



Social networks are very popular now. They use different types of relationships to organize individual users in a network. In this problem friendship is used as a method to connect users. For each user you are given the list of his friends. Consider friendship as a symmetric relation, so if user a is a friend of user b then b is a friend of a.

A friend of a friend for a is such a user c that c is not a friend of a, but there is such b that b is a friend of a and c is a friend of b. Obviously c ≠ a.

Your task is to find the list of friends of friends for the given user x.

Input
The first line of the input contains integer numbers N and x (1 ≤ N ≤ 50, 1 ≤ x ≤ N), where N is the total number of users and x is user to be processed. Users in the input are specified by their numbers, integers between 1 and N inclusive. The following N lines describe friends list of each user. The i-th line contains integer di (0 ≤ di ≤ 50) — number of friends of the i-th user. After it there are di distinct integers between 1 and N — friends of the i-th user. The list doesn't contain i. It is guaranteed that if user a is a friend of user b then b is a friend of a.

Output
You should output the number of friends of friends of x in the first line. Second line should contain friends of friends of x printed in the increasing order.

Example(s)
sample input
sample output
4 2
1 2
2 1 3
2 4 2
1 3
1
4

sample input
sample output
4 1
3 4 3 2
3 1 3 4
3 1 2 4
3 1 2 3

<|response|>
1. Abridged Problem Statement  
You are given an undirected “friendship” graph of N users (numbered 1…N) and a particular user x. For every user i, you know the list of their direct friends. A “friend of a friend” of x is any user c ≠ x who:  
  - is *not* a direct friend of x, and  
  - shares at least one mutual friend b with x (i.e., b is a direct friend of both x and c).  
Find all such users c, output their count and list them in increasing order.

2. Key Observations  
  • N is at most 50, so quadratic or even cubic solutions run instantly.  
  • We only care about distance-2 vertices from x (excluding x itself and x’s neighbors).  
  • Friendship is symmetric: if a is in b’s list, b is in a’s list.  
  • Checking “does c share a friend with x?” amounts to: ∃ f such that adj[x][f] and adj[f][c].  

3. Full Solution Approach  
 1. Read N and x.  
 2. Build the graph in memory. Two common choices:  
    – An adjacency matrix adj[1..N][1..N], where adj[i][j] = true if i and j are friends.  
    – An array of sets/lists friends[i].  
 3. Initialize an empty list result.  
 4. For each user c from 1 to N:  
    a. Skip c == x.  
    b. Skip if adj[x][c] is true (c is a direct friend of x).  
    c. Otherwise, scan all f from 1 to N: if adj[x][f] && adj[f][c], mark c as “friend-of-friend” and break.  
    d. If marked, add c to result.  
 5. Sort result (though if you scan c in increasing order you can append directly).  
 6. Print result.size(), then the elements of result on one line separated by spaces.

Time Complexity: O(N²). Memory: O(N²) or O(N+E), trivial for N≤50.

4. C++ Implementation with Detailed Comments  
```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int N, x;
    cin >> N >> x;

    // Build adjacency matrix of size (N+1)x(N+1), 1-based
    static bool adj[51][51] = {false};
    for(int i = 1; i <= N; i++) {
        int d;
        cin >> d;
        while(d--) {
            int f;
            cin >> f;
            // mark friendship both ways
            adj[i][f] = true;
            adj[f][i] = true;
        }
    }

    vector<int> result;
    // Examine each candidate c
    for(int c = 1; c <= N; c++) {
        if (c == x) continue;          // skip self
        if (adj[x][c]) continue;       // skip direct friends

        // Check for a mutual friend b
        bool isFoF = false;
        for(int b = 1; b <= N; b++) {
            if (adj[x][b] && adj[b][c]) {
                isFoF = true;
                break;
            }
        }
        if (isFoF) {
            result.push_back(c);
        }
    }

    // Output count and the sorted list
    // (result is already in increasing order by construction)
    cout << result.size() << "\n";
    if (!result.empty()) {
        for(int v : result) {
            cout << v << " ";
        }
        cout << "\n";
    }

    return 0;
}
```

5. Python Implementation with Detailed Comments  
```python
import sys

def main():
    data = sys.stdin.read().split()
    it = iter(data)
    N = int(next(it))
    x = int(next(it))

    # Build adjacency sets: friends[i] contains all direct friends of i
    friends = [set() for _ in range(N+1)]
    for i in range(1, N+1):
        d = int(next(it))
        for _ in range(d):
            f = int(next(it))
            friends[i].add(f)
            friends[f].add(i)

    result = []
    # For each user c, check conditions
    for c in range(1, N+1):
        if c == x:
            continue              # skip x itself
        if c in friends[x]:
            continue              # skip direct friends

        # Check if they share any mutual friend
        # i.e., intersection is non-empty
        if friends[x].intersection(friends[c]):
            result.append(c)

    # Sort (though c was 1..N in order)
    result.sort()

    # Output
    print(len(result))
    if result:
        print(*result)

if __name__ == "__main__":
    main()
```
p492.in1
======================
3
20
150
1

=================
p492.cpp
======================
#include <bits/stdc++.h>

using namespace std;

template<typename T1, typename T2>
ostream& operator<<(ostream& out, const pair<T1, T2>& x) {
    return out << x.first << ' ' << x.second;
}

template<typename T1, typename T2>
istream& operator>>(istream& in, pair<T1, T2>& x) {
    return in >> x.first >> x.second;
}

template<typename T>
istream& operator>>(istream& in, vector<T>& a) {
    for(auto& x: a) {
        in >> x;
    }
    return in;
};

template<typename T>
ostream& operator<<(ostream& out, const vector<T>& a) {
    for(auto x: a) {
        out << x << ' ';
    }
    return out;
};

int64_t n;

void read() { cin >> n; }

vector<vector<vector<int64_t>>> dp;

string bound_s;

int64_t rec(int pos, int last_1, int is_smaller) {
    if(pos == bound_s.size()) {
        return 1;
    }

    int64_t& memo = dp[pos][last_1][is_smaller];
    if(memo != -1) {
        return memo;
    }

    memo = 0;
    int up = bound_s[pos] - '0';
    int high = is_smaller ? 9 : up;
    for(int d = 0; d <= high; d++) {
        if(last_1 && (d == 3)) {
            continue;
        }

        memo += rec(pos + 1, d == 1, is_smaller | (d < up));
    }

    return memo;
}

int64_t cnt_below(int64_t bound) {
    bound_s = to_string(bound);
    dp.assign(bound_s.size(), {{-1, -1}, {-1, -1}});
    return rec(0, 0, 0);
}

void solve() {
    int64_t low = 0, high = 2 * n, mid, ans;
    while(low <= high) {
        mid = low + (high - low) / 2;
        // -1 as we shouldn't count 0.
        if(cnt_below(mid) - 1 >= n) {
            high = mid - 1;
            ans = mid;
        } else {
            low = mid + 1;
        }
    }

    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int T = 1;
    cin >> T;
    for(int test = 1; test <= T; test++) {
        read();
        // cout << "Case #" << test << ": ";
        solve();
    }

    return 0;
}

=================
p492.ans1
======================
21
162
1

=================
statement.txt
======================
492. Hotel in Ves Lagos
Time limit per test: 0.25 second(s)
Memory limit: 262144 kilobytes
input: standard
output: standard



A new hotel is being built in the city of Ves Lagos. The hotel will have an infinite number of rooms (it is out of fashion to build hotels with finite numbers of rooms). The new hotel also tries to cater for superstitious guests.

The most common superstition in Ves Lagos is that the number 13 brings bad luck. Accordingly, only numbers whose decimal forms do not contain the substring "13" will be used to label the rooms in the new hotel. For example, the hotel will have rooms numbered 1, 3, 14, 31, 123, but will not have the rooms 13, 132, 913, 1308, 1313.

Let's consider the list of all room numbers, ordered increasingly. Find the N-th number in this list (members of the list are indexed from 1).

Input
The input file contains several test cases. The first line of the file contains T (1 ≤ T ≤ 100), the number of test cases. Each of the following T lines describes one test case and contains the integer N (1 ≤ N ≤ 1018).

Output
The output file should contain exactly T lines, with the i-th line containing exactly one integer, the answer for the i-th test case from the input file.

Example(s)
sample input
sample output
3
20
150
1
21
162
1

=================
